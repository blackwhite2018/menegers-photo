{"version":3,"sources":["components/FileLoader/FileReaderForm/FileReaderForm.jsx","components/FileLoader/FileWrapper/Img/Img.jsx","components/FileLoader/FileWrapper/FileWrapper.jsx","components/FileLoader/FileLoader.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FileReaderForm","handleGetUrlsImage","fileRef","useRef","fileToDataUrl","file","Promise","resolve","reject","fileReader","FileReader","addEventListener","evt","currentTarget","result","Error","error","readAsDataURL","handleSelect","a","preventDefault","files","current","all","map","urls","className","type","ref","onChange","Img","src","handleRemoveImage","alt","onClick","aria-label","aria-hidden","FileWrapper","_id","key","FileLoader","useState","setImages","urlsIds","reduce","acc","url","shortid","generate","prevValue","cloneUrls","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yRAkDeA,EA/CQ,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAChBC,EAAUC,mBAEVC,EAAgB,SAAAC,GAClB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAa,IAAIC,WAEvBD,EAAWE,iBAAiB,QAAQ,SAAAC,GAChCL,EAAQK,EAAIC,cAAcC,WAG9BL,EAAWE,iBAAiB,SAAS,SAAAC,GACjCJ,EAAO,IAAIO,MAAMH,EAAIC,cAAcG,WAGvCP,EAAWQ,cAAcZ,OAI3Ba,EAAY,uCAAG,WAAMN,GAAN,iBAAAO,EAAA,6DACjBP,EAAIQ,iBACEC,EAFW,YAECnB,EAAQoB,QAAQD,OAFjB,SAGEf,QAAQiB,IAAIF,EAAMG,KAAI,SAAAnB,GAAI,OAAID,EAAcC,OAH9C,OAGXoB,EAHW,OAIjBxB,EAAmBwB,GAJF,2CAAH,sDAOlB,OACI,yBAAKC,UAAU,eACX,0BAAMA,UAAU,QACZ,2BACIC,KAAK,OACLD,UAAU,aACVE,IAAK1B,EACL2B,SAAUX,IAEd,yBAAKQ,UAAU,QAAf,sBCRDI,EA3BH,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,kBAMhB,OACI,4BAAQN,UAAU,WACd,yBACIA,UAAU,oBACVO,IAAI,MACJF,IAAKA,IAET,4BAAQG,QAXI,SAAAtB,GAChBoB,EAAkBD,IAUgBL,UAAU,kBAAkBS,aAAW,gBACjE,uBAAGT,UAAU,cAAcU,cAAY,YCUxCC,EAvBK,SAAC,GAAkC,IAAhChB,EAA+B,EAA/BA,MAAOW,EAAwB,EAAxBA,kBAC1B,OACI,yBAAKN,UAAU,gBAEPL,EAAMG,KAAI,gBAAGc,EAAH,EAAGA,IAAKP,EAAR,EAAQA,IAAR,OACN,kBAAC,EAAD,CACIQ,IAAKD,EACLP,IAAKA,EACLC,kBAAmBA,SCiC5BQ,EAvCI,WAAO,IAAD,EACKC,mBAAS,IADd,mBACdhB,EADc,KACRiB,EADQ,KA0BrB,OACI,yBAAKhB,UAAU,aACX,kBAAC,EAAD,CACIzB,mBA1Be,SAAAwB,GACvB,IAAMkB,EAAUlB,EAAKmB,QAAO,SAACC,EAAKC,GAC9B,MAAM,GAAN,mBACOD,GADP,CAEI,CACIP,IAAKS,IAAQC,WACbjB,IAAKe,OAGd,IACHJ,GAAU,SAAAO,GACN,MAAM,GAAN,mBACOA,GADP,YAEON,UAeP,kBAAC,EAAD,CACItB,MAAOI,EACPO,kBAZc,SAAAD,GACtB,IAAMmB,EAAS,YAAOzB,GACtBiB,EAAUQ,EAAUC,QAAO,SAAAL,GAAG,OAAIA,EAAIf,MAAQA,WCtBvCqB,EAJH,kBACV,kBAAC,EAAD,OCQkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,c","file":"static/js/main.cf81905f.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FileReaderForm = ({ handleGetUrlsImage }) => {\r\n    const fileRef = useRef();\r\n\r\n    const fileToDataUrl = file => {\r\n        return new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader();\r\n\r\n            fileReader.addEventListener('load', evt => {\r\n                resolve(evt.currentTarget.result);\r\n            });\r\n\r\n            fileReader.addEventListener('error', evt => {\r\n                reject(new Error(evt.currentTarget.error));\r\n            });\r\n\r\n            fileReader.readAsDataURL(file);\r\n        });\r\n    };\r\n\r\n    const handleSelect = async evt => {\r\n        evt.preventDefault();\r\n        const files = [...fileRef.current.files];\r\n        const urls = await Promise.all(files.map(file => fileToDataUrl(file)));\r\n        handleGetUrlsImage(urls);\r\n    };\r\n\r\n    return (\r\n        <div className=\"file-reader\">\r\n            <form className=\"form\">\r\n                <input\r\n                    type=\"file\"\r\n                    className=\"form__file\"\r\n                    ref={fileRef}\r\n                    onChange={handleSelect}\r\n                />\r\n                <div className=\"stub\">Click to Select</div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nFileReaderForm.propTypes = {\r\n    props: PropTypes.shape({\r\n        handleGetUrlsImage: PropTypes.func.isRequired\r\n    })\r\n};\r\n\r\nexport default FileReaderForm;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Img = ({ src, handleRemoveImage }) => {\r\n\r\n    const handleClick = evt => {\r\n        handleRemoveImage(src);\r\n    };\r\n\r\n    return (\r\n        <figure className=\"img-box\">\r\n            <img\r\n                className=\"file-wrapper__img\"\r\n                alt='...'\r\n                src={src}\r\n            />\r\n            <button onClick={handleClick} className=\"img-box__remove\" aria-label=\"delete image\">\r\n                <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n            </button>\r\n        </figure>\r\n    )\r\n};\r\n\r\nImg.propTypes = {\r\n    props: PropTypes.shape({\r\n        src: PropTypes.string.isRequired,\r\n        handleRemoveImage: PropTypes.func.isRequired\r\n    })\r\n};\r\n\r\nexport default Img;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Img from './Img/Img';\r\n\r\nconst FileWrapper = ({ files, handleRemoveImage }) => {\r\n    return (\r\n        <div className=\"file-wrapper\">\r\n            {\r\n                files.map(({ _id, src }) => (\r\n                    <Img\r\n                        key={_id}\r\n                        src={src}\r\n                        handleRemoveImage={handleRemoveImage}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nFileWrapper.propTypes = {\r\n    props: PropTypes.shape({\r\n        files: PropTypes.array.isRequired,\r\n        handleRemoveImage: PropTypes.func.isRequired\r\n    })\r\n};\r\n\r\nexport default FileWrapper;\r\n\r\n","import React, { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport './FileLoader.css';\r\nimport FileReaderForm from './FileReaderForm/FileReaderForm';\r\nimport FileWrapper from './FileWrapper/FileWrapper';\r\n\r\nconst FileLoader = () => {\r\n    const [urls, setImages] = useState([]);\r\n\r\n    const handleGetUrlsImage = urls => {\r\n        const urlsIds = urls.reduce((acc, url) => {\r\n            return [\r\n                ...acc,\r\n                {\r\n                    _id: shortid.generate(),\r\n                    src: url\r\n                }\r\n            ];\r\n        }, []);\r\n        setImages(prevValue => {\r\n            return [\r\n                ...prevValue,\r\n                ...urlsIds\r\n            ];\r\n        });\r\n    };\r\n\r\n    const handleRemoveImage = src => {\r\n        const cloneUrls = [...urls];\r\n        setImages(cloneUrls.filter(url => url.src !== src));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <FileReaderForm\r\n                handleGetUrlsImage={handleGetUrlsImage}\r\n            />\r\n            <FileWrapper\r\n                files={urls}\r\n                handleRemoveImage={handleRemoveImage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileLoader;\r\n\r\n","import React from 'react';\nimport FileLoader from './components/FileLoader/FileLoader';\n\nconst App = () => (\n  <FileLoader />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}